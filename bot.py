# bot.py

import logging
import time
from collections import defaultdict
from telegram import Update
from telegram.ext import Application, MessageHandler, filters, ContextTypes
from zendesk_client import create_ticket, get_ticket_comments, get_ticket_info
from slack_client import send_slack_notification
import asyncio
import os

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ ===
MAX_MESSAGE_LENGTH = 1000  # –ú–∞–∫—Å. 1000 —Å–∏–º–≤–æ–ª–æ–≤ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
RATE_LIMIT_WINDOW = 20     # —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –æ—Ç –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

# Rate limiting: user_id -> timestamp –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
user_last_request = defaultdict(float)

# –°–ª–æ–≤–∞—Ä—å: –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ ‚Üí —Ç–µ–º–∞ —Ç–∏–∫–µ—Ç–∞
TRIGGER_KEYWORDS = {
    "deposit": ["deposit", "–¥–µ–ø–æ–∑–∏—Ç", "–≤–Ω–µ—Å—Ç–∏", "–ø–æ–ø–æ–ª–Ω–∏—Ç—å", "top up", "fund"],
    "withdrawal": ["withdraw", "–≤—ã–≤–æ–¥", "—Å–Ω—è—Ç—å", "–≤—ã–≤–µ—Å—Ç–∏", "cash out", "withdrawal"],
    "login": ["login", "–ª–æ–≥–∏–Ω", "–≤–æ–π—Ç–∏", "–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è", "–Ω–µ –º–æ–≥—É –∑–∞–π—Ç–∏", "–ø–∞—Ä–æ–ª—å"],
    "bug": ["bug", "–æ—à–∏–±–∫–∞", "—Å–ª–æ–º–∞–ª–æ—Å—å", "–Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç", "crash", "–ø–∞–¥–∞–µ—Ç"],
    "other": ["help", "–ø–æ–º–æ—â—å", "support", "–ø–æ–¥–¥–µ—Ä–∂–∫–∞", "–≤–æ–ø—Ä–æ—Å"],
}

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–≤ —Ç–∏–∫–µ—Ç–æ–≤
active_monitors = {}

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
from config import TELEGRAM_BOT_TOKEN, BOT_USERNAME


def detect_ticket_category(text: str) -> str:
    text_lower = text.lower()
    for category, keywords in TRIGGER_KEYWORDS.items():
        if any(keyword in text_lower for keyword in keywords):
            return category.capitalize()
    return "Other"


async def handle_mention(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = update.message
    user = message.from_user
    raw_text = message.text or ""
    chat_id = message.chat.id

    # === 1. Rate limiting –ø–æ user_id ===
    now = time.time()
    if now - user_last_request[user.id] < RATE_LIMIT_WINDOW:
        await message.reply_text("‚è≥ Please wait before sending another request.")
        return
    user_last_request[user.id] = now

    # === 2. –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª–∏–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏—è ===
    if len(raw_text) > MAX_MESSAGE_LENGTH:
        await message.reply_text(f"‚ùå Message is too long. Maximum allowed: {MAX_MESSAGE_LENGTH} characters.")
        return

    # === –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è ===
    mentioned = False
    if message.entities:
        for entity in message.entities:
            if entity.type == "mention":
                mentioned_username = raw_text[entity.offset + 1 : entity.offset + entity.length]
                if mentioned_username == BOT_USERNAME:
                    mentioned = True
                    break

    if not mentioned:
        # –õ–æ–≥–∏—Ä—É–µ–º –¢–û–õ–¨–ö–û –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ, –ù–ï —Ç–µ–∫—Å—Ç!
        logger.debug(f"–£–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ –æ—Ç user_id={user.id} –≤ chat_id={chat_id}")
        return

    # === –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ: –ù–ï–¢ —Ç–µ–ª–∞ —Å–æ–æ–±—â–µ–Ω–∏—è! ===
    logger.info(f"‚úÖ –£–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç user_id={user.id}, username={user.username}, chat_id={chat_id}")

    # === –û—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –æ—Ç —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –±–æ—Ç–∞ ===
    clean_text = raw_text
    if message.entities:
        for entity in message.entities:
            if entity.type == "mention":
                mentioned_username = raw_text[entity.offset + 1 : entity.offset + entity.length]
                if mentioned_username == BOT_USERNAME:
                    mentioned_full = raw_text[entity.offset : entity.offset + entity.length]
                    clean_text = clean_text.replace(mentioned_full, "", 1).strip()

    # === –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ ===
    chat = message.chat
    if chat.type == "private":
        chat_info = f"Private chat with {user.full_name or 'User'}"
    elif chat.title:
        chat_info = f"Group: {chat.title}"
        if chat.username:
            chat_info += f" (@{chat.username})"
    else:
        chat_info = f"Chat ID: {chat.id}"

    # === –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é ===
    category = detect_ticket_category(clean_text)
    subject = f"[Telegram] {category}"

    # === –§–æ—Ä–º–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ ===
    description = (
        f"Message: {clean_text}\n"
        f"From: {user.full_name or '‚Äî'} (@{user.username or 'unknown'})\n"
        f"{chat_info}"
    )

    # === –°–æ–∑–¥–∞—ë–º —Ç–∏–∫–µ—Ç ===
    ticket_url, ticket_id = await create_ticket(
        subject=subject,
        description=description,
        requester_name=user.full_name or "Telegram User",
        telegram_user_id=user.id
    )

    if not ticket_url:
        await message.reply_text("‚ùå Failed to create a support ticket. Please try again later.")
        return

    # === –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Slack ===
    slack_msg = (
        f"üÜï New request from Telegram\n\n"
        f"üìå *Category:* {category}\n"
        f"üí¨ *Message:* {clean_text[:250]}{'...' if len(clean_text) > 250 else ''}\n"
        f"üë§ *User:* {user.full_name or '‚Äî'} (<https://t.me/{user.username}|@{user.username}>)\n"
        f"üè¢ *Chat:* {chat.title if chat.title else 'Private chat'}\n"
        f"üîó *Ticket:* <{ticket_url}|Open in Zendesk>"
    )
    await send_slack_notification(slack_msg)

    # === –û—Ç–≤–µ—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ===
    await message.reply_text(f"‚úÖ Support ticket #{ticket_id} has been created.")

    # === –ó–ê–©–ò–¢–ê –û–¢ –î–£–ë–õ–ò–†–û–í–ê–ù–ò–Ø –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê ===
    if ticket_id in active_monitors:
        logger.warning(f"–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–ª—è —Ç–∏–∫–µ—Ç–∞ {ticket_id} —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
    else:
        task = asyncio.create_task(
            monitor_ticket_comments(
                ticket_id=ticket_id,
                user_id=user.id,
                chat_id=chat_id,
                original_message_id=message.message_id,
                bot=context.bot
            )
        )
        active_monitors[ticket_id] = task
        task.add_done_callback(lambda t: active_monitors.pop(ticket_id, None))


async def monitor_ticket_comments(ticket_id: int, user_id: int, chat_id: int, original_message_id: int, bot):
    logger.info(f"üöÄ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ç–∏–∫–µ—Ç–∞ {ticket_id} –∑–∞–ø—É—â–µ–Ω")
    last_comment_id = None

    while True:
        try:
            comments = await get_ticket_comments(ticket_id)
            if not comments:
                await asyncio.sleep(15)
                continue

            latest = comments[-1]
            comment_id = latest["id"]
            author_id = latest.get("author_id")

            ticket_info = await get_ticket_info(ticket_id)
            requester_id = ticket_info["ticket"]["requester_id"]

            if author_id == requester_id:
                last_comment_id = comment_id
                await asyncio.sleep(15)
                continue

            if comment_id != last_comment_id:
                body = latest["body"]
                if "‚Äî\nSent from" in body:
                    body = body.split("‚Äî\nSent from")[0].strip()

                try:
                    await bot.send_message(
                        chat_id=chat_id,
                        text=f"üí¨ *Support reply:*\n{body}",
                        reply_to_message_id=original_message_id,
                        parse_mode="Markdown"
                    )
                    last_comment_id = comment_id
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {e}")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ç–∏–∫–µ—Ç–∞ {ticket_id}: {e}")

        await asyncio.sleep(15)


def main():
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
    application.add_handler(MessageHandler(filters.TEXT & filters.ChatType.GROUPS, handle_mention))
    logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞–Ω–∏–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π...")
    application.run_polling()


if __name__ == "__main__":
    main()